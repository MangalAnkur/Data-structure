#include<stdio.h>
struct arrayADT
{
    int capacity;
    int lastindex;
    int *ptr;
};
struct arrayADT* createarray(int capacity);
int getitem(struct arrayADT *arr,int index);
int setitem(struct arrayADT *arr,int index,int value);
int edititem(struct arrayADT *arr,int index,int newvalue);
int countitems(struct arrayADT *arr);
int removeitem(struct arrayADT *arr,int index);
int search(struct arrayADT *arr,int item);
void sort(struct arrayADT* arr);
struct arrayADT* createarray(int capacity)
{
    struct arrayADT *arr;
    arr=(struct arrayADT *)malloc(sizeof(struct arrayADT));
    arr->capacity=capacity;
    arr->lastindex=-1;
    arr->ptr=(int *)malloc(arr->capacity*(sizeof(int)));
    return arr;
}

int getitem(struct arrayADT *arr,int index)
{
    if(index>arr->lastindex || index<0)
    {
        printf ("\n invalid index");
        return -1;
    }
    else
        return (arr->ptr[index]);
}

int setitem(struct arrayADT *arr,int index,int value)
{
    int i;
    if(arr->lastindex==arr->capacity-1)
    {
        printf ("\n Array is full, no space in array");
        return -1;
    }
    if( index<0 || index > arr->lastindex+1 )
    {
        printf ("\n invalid index");
        return -1;
    }

    if(index<=arr->lastindex)
    {
        arr->lastindex=arr->lastindex+1;
        i=arr->lastindex;
        while(i!=index)
        {
            arr->ptr[i]=arr->ptr[i-1];
            i--;
        }
        arr->ptr[index]=value;
        return 1;
    }
     if(index==arr->lastindex+1)
    {
        arr->lastindex=arr->lastindex+1;
        arr->ptr[index]=value;
        return 1;
    }
}

int edititem(struct arrayADT *arr,int index,int newvalue)
{
    if(index<0 || index>arr->lastindex)
    {
        printf ("\n invalid index");
        return -1;
    }
    else
    {
        arr->ptr[index]=newvalue;
        return 1;
    }
}

int countitems(struct arrayADT *arr)
{
    return (arr->lastindex+1);
    //when array will empty then it will return 0 (-1+1=0)
}

int removeitem(struct arrayADT *arr,int index)
{
    if(index<0 || index>arr->lastindex)
    {
        printf("\n invalid index");
        return -1;
    }
    if(index==arr->lastindex)
    {
        arr->lastindex=arr->lastindex-1;
        return 1;
    }
    if(index<arr->lastindex)
    {
        int i;
        i=index;
        while(i!=arr->lastindex)
        {
            arr->ptr[i]=arr->ptr[i+1];
            i++;
        }
        arr->lastindex=arr->lastindex-1;
        return 1;
    }
}

int search(struct arrayADT *arr,int item)
{
    int i;
    if(arr->lastindex==-1)
    {
        printf("\n Array is empty");
        return -1;
    }
    for (i=0;i<=arr->lastindex;i++)
    {
        if(arr->ptr[i]==item)
            return 1;
    }
    return -1;  //it will run when finally item will not found
}


void sort(struct arrayADT* arr)
{
    int i,r,temp,n;
    n=arr->lastindex+1;
    for(r=1;r<=n-1;r++)
        for(i=0;i<=n-1-r;i++)
        if(arr->ptr[i]>arr->ptr[i+1])
    {
        temp=arr->ptr[i];
        arr->ptr[i]=arr->ptr[i+1];
        arr->ptr[i+1]=temp;
    }
}

main()
{
    int i;
    struct arrayADT *arr;
    arr=createarray(10);
    setitem(arr,0,10);
    setitem(arr,1,20);
    setitem(arr,2,15);
    setitem(arr,3,40);
    setitem(arr,4,35);
    setitem(arr,5,60);
    setitem(arr,6,65);
    for(i=0;i<countitems(arr);i++)
        printf("%d ",getitem(arr,i));

    sort(arr);
    printf("\n");
    for(i=0;i<countitems(arr);i++)
        printf("%d ",getitem(arr,i));

    edititem(arr,2,22);
    printf("\n");
    for(i=0;i<countitems(arr);i++)
        printf("%d ",getitem(arr,i));

    removeitem(arr,4);
    printf("\n");
    for(i=0;i<countitems(arr);i++)
        printf("%d ",getitem(arr,i));

    i=search(arr,60);
    if(i==-1)
        printf("\n item does not found");

    else
        printf("\n item has found");
}
